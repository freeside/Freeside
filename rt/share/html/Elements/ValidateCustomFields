%# BEGIN BPS TAGGED BLOCK {{{
%#
%# COPYRIGHT:
%#
%# This software is Copyright (c) 1996-2014 Best Practical Solutions, LLC
%#                                          <sales@bestpractical.com>
%#
%# (Except where explicitly superseded by other copyright notices)
%#
%#
%# LICENSE:
%#
%# This work is made available to you under the terms of Version 2 of
%# the GNU General Public License. A copy of that license should have
%# been provided with this software, but in any event can be snarfed
%# from www.gnu.org.
%#
%# This work is distributed in the hope that it will be useful, but
%# WITHOUT ANY WARRANTY; without even the implied warranty of
%# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
%# General Public License for more details.
%#
%# You should have received a copy of the GNU General Public License
%# along with this program; if not, write to the Free Software
%# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
%# 02110-1301 or visit their web page on the internet at
%# http://www.gnu.org/licenses/old-licenses/gpl-2.0.html.
%#
%#
%# CONTRIBUTION SUBMISSION POLICY:
%#
%# (The following paragraph is not intended to limit the rights granted
%# to you to modify and distribute this software under the terms of
%# the GNU General Public License and is only of importance to you if
%# you choose to contribute your changes and enhancements to the
%# community by submitting them to Best Practical Solutions, LLC.)
%#
%# By intentionally submitting any modifications, corrections or
%# derivatives to this work, or any other work intended for use with
%# Request Tracker, to Best Practical Solutions, LLC, you confirm that
%# you are the copyright holder for those contributions and you grant
%# Best Practical Solutions,  LLC a nonexclusive, worldwide, irrevocable,
%# royalty-free, perpetual, license to use, copy, create derivative
%# works based on those contributions, and sublicense and distribute
%# those contributions and any derivatives thereof.
%#
%# END BPS TAGGED BLOCK }}}
<%INIT>
my ($valid, @res) = (1, ());
$CustomFields->GotoFirstItem;
while ( my $CF = $CustomFields->Next ) {
    my $field = $NamePrefix . $CF->Id . "-Value";

    my $value;
    if ($ARGSRef->{"${field}s-Magic"} and exists $ARGSRef->{"${field}s"}) {
        $value = $ARGSRef->{"${field}s"};

        # We only validate Single Combos -- multis can never be user input
        next if ref $value;
    }
    else {
        $value = $ARGSRef->{$field};
    }
    $m->notes(('Field-' . $CF->Id) => $value);

    my @values = ();
    if ( ref $value eq 'ARRAY' ) {
        @values = @$value;
    } elsif ( $CF->Type =~ /text/i ) {
        @values = ($value);
    } else {
        @values = split /\r*\n/, ( defined $value ? $value : '');
    }
    @values = grep $_ ne '',
        map {
            s/\r+\n/\n/g;
            s/^\s+//;
            s/\s+$//;
            $_;
        }
        grep defined, @values;
    @values = ('') unless @values;

    for my $value( @values ) {
        if ($value) {
            if ( $CF->Type eq 'IPAddress' ) {
                use Regexp::Common qw(RE_net_IPv4);
                my $ip = RT::ObjectCustomFieldValue->ParseIP( $value );
                unless ( $ip ) {
                    my $msg =
                      loc( "Input can not be parsed as an IP address" );
                    $m->notes( ( 'InvalidField-' . $CF->Id ) => $msg );
                    push @res, $msg;
                    $valid = 0;
                }
            }
            elsif ( $CF->Type eq 'IPAddressRange' ) {
                my ( $start_ip, $end_ip ) =
                  RT::ObjectCustomFieldValue->ParseIPRange($value);
                unless ( $start_ip && $end_ip ) {
                    my $msg =
                      loc( "Input can not be parsed as an IP address range" );
                    $m->notes( ( 'InvalidField-' . $CF->Id ) => $msg );
                    push @res, $msg;
                    $valid = 0;
                }
            }
        }

        next if $CF->MatchPattern($value);

        my $msg = loc("Input must match [_1]", $CF->FriendlyPattern);
        $m->notes( ('InvalidField-' . $CF->Id) => $msg );
        push @res, $msg;
        $valid = 0;
    }
}
$m->notes('ValidFields', $valid);
return wantarray? ($valid, @res): $valid;
</%INIT>
<%ARGS>
$CustomFields
$ARGSRef
$NamePrefix => "Object-RT::Ticket--CustomField-"
</%ARGS>
