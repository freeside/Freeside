#!/usr/bin/perl -w

use strict;
use POSIX qw( :sys_wait_h );
use Sys::SigAction qw( set_sig_handler );
use Date::Parse;
use Date::Format;
use IPC::Run qw( run ); #timeout );
use FS::Daemon ':all'; #daemonize1 drop_root daemonize2 myexit logfile sig*
use FS::UID qw( adminsuidsetup forksuidsetup dbh driver_name );
use FS::Record qw( qsearch );
use FS::torrus_srvderive;

our $DEBUG = 2;
our $max_kids = 4;
our %kids;

my $user = shift or die &usage;
$FS::Daemon::PID_NEWSTYLE = 1;
daemonize1('torrus-srvderive');

drop_root();

adminsuidsetup($user);

logfile( "%%%FREESIDE_LOG%%%/torrus-srvderive-log.". $FS::UID::datasrc );

daemonize2();

our $conf = new FS::Conf;

do {
    warn "not running: network_monitoring_system not Torrus_Internal\n"
    myexit();
} unless _shouldrun();

#--

our $kids = 0;

#MAIN: while (1) {
while (1) {

  #SERVICEID: foreach my $torrus_srvderive ( qsearch('torrus_srvderive', {}) ) {
  foreach my $torrus_srvderive ( qsearch('torrus_srvderive', {}) ) {

    &reap_kids;
    if ( $kids >= $max_kids ) {
      sleep 5;
      myexit() if sigterm() || sigint();
      redo;
    }

    defined( my $pid = fork ) or do {
      #warn "WARNING: can't fork: $!\n";
      #next; #don't increment the kid counter
      die "can't fork: $!\n";
    };

    if ( $pid ) {
      $kids++;
      $kids{$pid} = 1;
    } else { #kid time

      #get new db handle
      $FS::UID::dbh->{InactiveDestroy} = 1;

      forksuidsetup($user);

      my $serviceid = $torrus_srvderive->serviceid;

      my @serviceids = $torrus_srvderive->component_serviceids;
      exit unless @serviceids; #don't try to search for empty virtual ports

      my @in = ();
      for my $dir ('_IN', '_OUT') {
        push @in, map dbh->quote("$_$dir"), @serviceids;
      }
      my $in = join(',', @in);

      if ( ! $torrus_srvderive->last_srv_date ) {
        warn "finding initial last_srv_date for $serviceid\n" if $DEBUG;
        my $dsql = "SELECT srv_date FROM srvexport WHERE serviceid IN ($in)
                    ORDER BY srv_date LIMIT 1";
        my $dsth = dbh->prepare($dsql) or die $DBI::errstr;
        $dsth->execute or die $dsth->errstr;
        my $row = $dsth->fetchrow_arrayref;
        my $date = (defined($row) && ref($row)) ? $row->[0] : '';
        if ( $date ) {
          warn "found initial last_srv_date of $date; updating $serviceid\n"
            if $DEBUG;
          $torrus_srvderive->last_srv_date($date);
          my $error = $torrus_srvderive->replace;
          die $error if $error;
        } else {
          warn "no initial last_srv_date for $serviceid; skipping\n" if $DEBUG;
          exit;
        }
      }

      #if we're more than a day behind, call native torrus srvderive
      my $last_srv_date = $torrus_srvderive->last_srv_date;
      my $currdate = time2str('%Y-%m-%d', time);
      if ( $last_srv_date ne $currdate
           && time - str2time($last_srv_date) > (24)*60*60
         ) {
        warn "serviceid $serviceid last_srv_date != $currdate\n" if $DEBUG;

        #delete records from last_srv_date
        my $dsql =
          'DELETE FROM srvexport WHERE srv_date = ? AND serviceid IN(?,?)';
        my $dsth = dbh->prepare($dsql) or die $DBI::errstr;
        warn "$dsql $last_srv_date ${serviceid}_IN ${serviceid}_OUT\n"
          if $DEBUG;
        $dsth->execute($last_srv_date, $serviceid.'_IN', $serviceid.'_OUT')
          or die $dsth->errstr;
        dbh->commit or die dbh->errstr;

        foreach my $dir ('_IN','_OUT') {

          #XX TORRUS_PATH
          my @cmd = ( '/usr/local/bin/torrus', 'srvderive',
                        "--start=$last_srv_date", "--end=$currdate",
                        "--out=$serviceid$dir", "--func=SUM",
                        map "$_$dir", @serviceids
                    );

          warn "calling native srvderive: ". join(' ', @cmd). "\n" if $DEBUG;
          my $out_and_err = '';
          run( \@cmd, '>&', \$out_and_err ) #verbose?  timeout?
            or die "error calling native srvderive: $out_and_err\n";

        }
        warn "native srvderive done" if $DEBUG;

        $torrus_srvderive->last_srv_date($currdate);
        my $error = $torrus_srvderive->replace;
        die $error if $error;

        #don't bother trying today's immediately
        warn "done with $serviceid for now\n" if $DEBUG;

      } else {

        warn "serviceid $serviceid last_srv_date == $currdate; skipping\n"
          if $DEBUG;

      }

      exit; #end-of-kid

    }

  } #foreach my $torrus_srvderive
  dbh->commit or die dbh->errstr;

  myexit() if sigterm() || sigint();
  warn "sleeping an hour\n" if $DEBUG > 1;
  sleep 60*60;
  warn "restarting main loop\n" if $DEBUG > 1;
}

sub _shouldrun {
     $conf->exists('network_monitoring_system')
  && $conf->config('network_monitoring_system') eq 'Torrus_Internal';
}

sub usage { 
  die "Usage:\n\n  freeside-cdrrewrited user\n";
}

sub reap_kids {
  foreach my $pid ( keys %kids ) {
    my $kid = waitpid($pid, WNOHANG);
    if ( $kid > 0 ) {
      $kids--;
      delete $kids{$kid};
    }
  }
}

=head1 NAME

freeside-torrus-srvderive - Freeside's Torrus virtual port daemon.

=head1 SYNOPSIS

  freeside-torrus-srvderive

=head1 DESCRIPTION

Runs continuously, searches for samples in the srvexport table which do not
have an entry for combined virtual ports, and adds them.

=head1 SEE ALSO

=cut

1;

